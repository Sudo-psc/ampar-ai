openapi: 3.1.0
info:
  title: ampar.ai API
  description: API da plataforma de telemedicina híbrida ampar.ai
  version: 1.0.0
  contact:
    name: ampar.ai Team
    email: dev@ampar.ai
    url: https://ampar.ai
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.ampar.ai/v1
    description: Production server
  - url: https://staging-api.ampar.ai/v1
    description: Staging server
  - url: http://localhost:3001/v1
    description: Development server

security:
  - BearerAuth: []

paths:
  # Authentication
  /auth/register:
    post:
      tags: [Authentication]
      summary: Registrar novo usuário
      description: Registra novo usuário com consentimento LGPD
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Usuário registrado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /auth/login:
    post:
      tags: [Authentication]
      summary: Login do usuário
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # AI Triage
  /triage:
    post:
      tags: [AI Triage]
      summary: Realizar triagem por IA
      description: Endpoint principal para triagem médica por IA
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriageRequest'
      responses:
        '200':
          description: Triagem realizada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriageResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Authentication Schemas
    RegisterRequest:
      type: object
      required: [email, password, cpf, fullName, lgpdConsent]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        cpf:
          type: string
          pattern: '^\d{11}$'
        fullName:
          type: string
          minLength: 2
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
        lgpdConsent:
          type: boolean
          const: true
        termsAccepted:
          type: boolean
          const: true

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        user:
          $ref: '#/components/schemas/User'
        expiresIn:
          type: integer

    # AI Triage Schemas
    TriageRequest:
      type: object
      required: [symptoms, patientId]
      properties:
        patientId:
          type: string
          format: uuid
        symptoms:
          type: string
          minLength: 10
        duration:
          type: string
        severity:
          type: integer
          minimum: 1
          maximum: 10
        medicalHistory:
          type: array
          items:
            type: string
        medications:
          type: array
          items:
            type: string

    TriageResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        soap:
          $ref: '#/components/schemas/SOAPNote'
        riskLevel:
          type: string
          enum: [low, medium, high, critical]
        escalationRequired:
          type: boolean
        recommendedActions:
          type: array
          items:
            type: string
        estimatedWaitTime:
          type: integer
        confidence:
          type: number
          minimum: 0
          maximum: 1

    SOAPNote:
      type: object
      properties:
        subjective:
          type: string
        objective:
          type: string
        assessment:
          type: string
        plan:
          type: string

    # User Schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        fullName:
          type: string
        role:
          type: string
          enum: [patient, doctor, admin, nurse]
        isVerified:
          type: boolean
        createdAt:
          type: string
          format: date-time

    # Common Schemas
    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: string
        details:
          type: object

  responses:
    BadRequest:
      description: Requisição inválida
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Não autorizado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Acesso negado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Recurso não encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Conflict:
      description: Conflito de dados
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Erro interno do servidor
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error' 